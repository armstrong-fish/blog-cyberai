<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>自由AI阵线！</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 自由AI阵线！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2024 02:30:05 -0230</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记录W8A8量化上传流程</title>
      <link>http://localhost:1313/posts/w8a8-quantification/</link>
      <pubDate>Thu, 17 Oct 2024 21:55:31 -0230</pubDate>
      
      <guid>http://localhost:1313/posts/w8a8-quantification/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文章经作者同意，转载自自由AI阵线社区，版权所有！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先在autodl注册账号、选择租用/创建实例，进入如下界面：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image1.png&#34; alt=&#34;image1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;选择按量计费，在地区中多做切换，不同地区的可选GPU型号不同。这里我选择四卡4090D，卡的数目可以在租用后随意调整至1~4卡之间，对于22B模型的量化已经足够，因此不必在意这里的选取。&lt;/p&gt;
&lt;p&gt;数据盘扩容选择100G就足够了，因为下载的原始22B模型约44G，量化后的W8A8模型22G，共66G。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image2.png&#34; alt=&#34;image2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后在镜像处选择基础镜像，我的选择如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image3.png&#34; alt=&#34;image3&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;完成以上这些，选择立即创建，设备就租到了。设备租到以后不要直接点开机按钮，而是选择“更多”中的“无卡模式开机”，费用很低，所以可以耐心折腾：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image4.png&#34; alt=&#34;image4&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image5.png&#34; alt=&#34;image5&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;无卡模式开机后，看到显示了ssh登录口令和快捷工具列表，点击JupyterLab：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image6.png&#34; alt=&#34;image6&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;JupyterLab中，点击“终端”按钮，做W8A8量化前的准备工作：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image7.png&#34; alt=&#34;image7&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image8.png&#34; alt=&#34;image8&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;打开终端，可以看到它提示了数据盘/root/autodl-tmp，也就是说掏钱扩容100G的空间和初始赠送的50G空间都位于这个叫做autodl-tmp的文件夹里，往这个文件夹里放东西，这拢共150G的数据盘就会越用越少。&lt;/p&gt;
&lt;p&gt;接下来安装量化所需的python工具，在终端中输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install llmcompressor -i https://mirrors.aliyun.com/pypi/simple/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以自动安装llmcompressor的最新版本了，截至发帖，它的最新版本是0.2.0：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image9.png&#34; alt=&#34;image9&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image10.png&#34; alt=&#34;image10&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这样就是安装成功了，接下来进入数据盘下载模型和量化所需的语料。先看看当前的位置，在终端中输入ls这两个字母回车：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image11.png&#34; alt=&#34;image11&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;可以看见目前终端中的目录层级可以看到和左侧文件视图里一一对应的项目：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image12.png&#34; alt=&#34;image12&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;实际上，当在JupyterLab的启动页中创建终端时，新打开的终端总是会与左侧文件视图具有一致的层级关系，所以有时如果懒得敲命令切换目录，可以在左边通过鼠标点击切换到目的目录后在右边创建新的终端来直接得到一个切换好目录的终端：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image13.png&#34; alt=&#34;image13&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image14.png&#34; alt=&#34;image14&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image15.png&#34; alt=&#34;image15&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;接下来下载量化所需的校准语料。在位于autodl-tmp目录下的终端中输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HF_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://hf-mirror.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image16.png&#34; alt=&#34;image16&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;看似没有动静，实则已经设置好了huggingface的镜像站以加速下载，否则在中国境内是很难连接huggingface的。&lt;/p&gt;
&lt;p&gt;在位于autodl-tmp目录下的终端中输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huggingface-cli download --repo-type dataset --resume-download HuggingFaceH4/ultrachat_200k --local-dir ultrachat_200k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image17.png&#34; alt=&#34;image17&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这样就开始下载了，有时下载会变得越来越慢，等不及了可以在终端中按Ctrl和c的组合键强制终端中的下载进程关闭，多按几次：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/W8A8/image18.png&#34; alt=&#34;image18&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然后按方向键的上键切换到下载指令，回车，再一次下载。下载进度不会丢失：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>All In One 小白大模型科普</title>
      <link>http://localhost:1313/posts/aio-llm/</link>
      <pubDate>Thu, 17 Oct 2024 19:32:15 +0800</pubDate>
      
      <guid>http://localhost:1313/posts/aio-llm/</guid>
      <description>帮助小白快速入门大模型相关概念和技术</description>
    </item>
    
    <item>
      <title>从零开始的赛博老婆！4 - 短期记忆与记忆体系</title>
      <link>http://localhost:1313/posts/cybermate4/</link>
      <pubDate>Fri, 11 Oct 2024 23:23:47 -0230</pubDate>
      
      <guid>http://localhost:1313/posts/cybermate4/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/94008036_p0_master1200.jpg&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;PIXIV: 94008036  @苏翼丶&lt;/p&gt;
&lt;h1 id=&#34;agent记忆体系浅谈&#34;&gt;Agent记忆体系浅谈&lt;/h1&gt;
&lt;p&gt;（我写完这篇文章再重新回看，记忆这两个词太多了，我发现我不认识“记忆”这两个字了，大家点点赞吧写教程真的消耗阳寿……(｡ ́︿ ̀｡)&lt;/p&gt;
&lt;p&gt;从GPT3破圈那一刻起，大家对LLM的记忆体系就众说纷纭。从技术上来讲，一方面Transformer架构衍生出的一些技术促进了记忆体系的发展（如 Embedding/Vector Database），另一方面有需求催生了另一些技术（如 Graph Database）。但就从2023年发展到现在，Agent的记忆体系进展比较缓慢。&lt;/p&gt;
&lt;p&gt;我在这些技术和概念的帮助下，设计了一套针对于赛博老婆的记忆体系。它的特点就是自动存取，同时可以保证分级的持久化记忆。&lt;/p&gt;
&lt;h2 id=&#34;记忆概念分类&#34;&gt;记忆概念分类&lt;/h2&gt;
&lt;p&gt;我想把赛博老婆的记忆体系分成三类：短期记忆，中期记忆，长期记忆。我们来分别解释这几个概念：&lt;/p&gt;
&lt;h3 id=&#34;短期记忆&#34;&gt;短期记忆&lt;/h3&gt;
&lt;p&gt;短期记忆有多短期呢？我认为短期记忆是包含最丰富的，最原始的信息的。就像人的记忆一样，人类每天都会忘掉很多事情的很多细节，但是你可能会记得刚刚发生的事情的并能够说出细节。我认为&lt;strong&gt;在LLM还没有开始&lt;em&gt;总结或简化&lt;/em&gt;那一部分最原始的记忆之前的内容&lt;/strong&gt;，都算作短期记忆。或者通俗一点讲，对于赛博老婆，&lt;strong&gt;每一个会话的上下文&lt;/strong&gt;，或者&lt;strong&gt;每一天当天（昨天）的记忆&lt;/strong&gt;，都算作短期记忆。因为这一部分记忆，包含了你和赛博老婆交互的原始记录。但是在这里，我想稍微延伸一点：我把当天的总结记忆和每一次会话的记忆也算作短期记忆之内。之所以如此规定，是因为在实际的记忆载入中，这类的近期记忆往往频率更高，同时需要相对详细的细节，他们往往是一起无条件载入的。也就是说，上下文记忆，默认是必要的，而上几次的对话，或者昨天聊了什么，也会有更大概率被提起，他们的载入频率也差不多，都很高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;会话：&lt;strong&gt;你和赛博老婆互动，聊了几句，然后你就去做别的事情了，比如说吃了个饭。当你吃完饭，可能已经过了会话超时时间，而你又不想继续之前的话题，而是聊点别的，于是赛博老婆就会开一个新的会话。这在后续的记忆结构化中有利于&lt;/strong&gt;实体提取&lt;/strong&gt;与&lt;strong&gt;记忆网&lt;/strong&gt;的生成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;中期记忆&#34;&gt;中期记忆&lt;/h3&gt;
&lt;p&gt;中期记忆有别于短期记忆，中期记忆是经过简化和总结的，也就是丢弃掉了某些细节而得到的记忆。但我们为什么称之为中期记忆呢？这仍然是属于对人脑记忆的模仿，人脑会暂存一部分正在进行的事情，并简化其中的内容，等到这个事件结束了，有了结果了，就会大幅度遗忘，可能最后只会保留一个印象，类似于：我曾经做过什么事情，当时的结果是……而对曾经事情的过程和细节，完全遗忘。而这类中期记忆也不会对永久记忆网产生较大的影响。&lt;/p&gt;
&lt;p&gt;我们在这里举例说明：你在某个网购官方平台购买了一个全新显卡RTX 9090 Ti Super Plus Max Ultra 1024TB，你付款商家发货寄出快递。由于你一直心心念念这款超强的显卡，你一直记着有这么个快递在路上，于是没事儿就点开查询快递到哪里了。&lt;em&gt;&lt;em&gt;这就是属于中期记忆的&lt;/em&gt;“事件中”&lt;/em&gt;&lt;strong&gt;。过了几天，你的快递终于到了，你非常开心，迫不及待地拆了包装，安装上去，这时你可能已经忘记自己看了多少次快递跟踪了，也忘了它是几天内到达的，因为这个时候你很想把它安装到电脑上看看效果。这就是中期记忆的&lt;/strong&gt;遗忘特性**，&lt;strong&gt;阶段性目标达成&lt;/strong&gt;可能会遗忘掉很多细节，但是事件存在周期又&lt;strong&gt;远超&lt;/strong&gt;“短期记忆”。你安装到了电脑，但是你发现用这个显卡跑LLM慢的要死，然后你惊讶的发现，由于某黄的精准刀法，RTX 9090 Ti Super Plus Max Ultra 1024TB虽然拥有超大的显存，但是其显存位宽却只有可怜的&lt;em&gt;128bit&lt;/em&gt;——连下一代的10070 Ti Super Plus Max Ultra Gaming的升级版本的&lt;em&gt;150bit&lt;/em&gt;都没有！在你不得不感叹某黄精准刀法的同时不由得骂：“Fxxk you Nvxdxa !!” 你很难过，在某海鲜市场折价出手，期间还没事就看一看某鱼，生怕买家到手刀或者无理由退款等逆天操作……终于，你是幸运的，你成功地卖出了显卡，这段风波画上句号。等到几年后你再想起这件事情，可能只会记得那印象深刻的阉割和那句“Fxxk you Nvxdxa !!”&lt;/p&gt;
&lt;p&gt;这就是中期记忆的特点了，不是所有记忆都会变成中期记忆的，只是某些特定事件，周期不短不长的才有资格被称为中期记忆。另外，上述案例是虚构的，绝对不是真实事件改编！！！&lt;/p&gt;
&lt;h3 id=&#34;长期记忆&#34;&gt;长期记忆&lt;/h3&gt;
&lt;p&gt;好，终于聊到这里了。我们要开始加速了。&lt;/p&gt;
&lt;p&gt;人脑的长期记忆是一个非常复杂的系统。我们搞赛博老婆只能尽量&lt;strong&gt;平衡&lt;/strong&gt;“精简”和“功能”。然而，赛博老婆可不像人，当你真的需要她回忆很重要的细节的时候，可不能像人一样，卖个萌然后糊弄过去。赛博老婆的长期记忆需要能够&lt;strong&gt;回溯&lt;/strong&gt;到最原始的对话记忆或相关文档。同时，大多数情况，仅仅是一些&lt;strong&gt;关键信息&lt;/strong&gt;的提示。这就对索引和查询系统提出了很高的要求，长期记忆系统设计的关键，就是如何&lt;em&gt;&lt;strong&gt;高效而精确&lt;/strong&gt;&lt;/em&gt;地自动存取，尤其是&lt;em&gt;&lt;strong&gt;取&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;我把长期记忆的查询和索引分成两种模式，“模糊检索”和“关系检索”，对应RAG和Graph Query。这只是两种不同的检索方法，实际情况大多是混合的，也就是并行的。为什么要这么做呢？我们来看实际例子。&lt;/p&gt;
&lt;p&gt;模糊检索：你需要让赛博老婆回忆一下你曾经都在哪几天&lt;strong&gt;消费&lt;em&gt;超过&lt;/em&gt;500&lt;/strong&gt;元。这时，“超过500元”是一个语意，他是和价值/开支相关的，这种情况记忆执行的是语意数量的范围检索，是相对模糊的。（因为记忆库是通用的，我们没有一个专门的账本数据库，不然的话直接表达式&amp;gt;500就可以解决）此时，语意模糊检索占大头，而关系检索占小头，关系检索仅作为实体或后续进一步细节查询的补充。&lt;/p&gt;
&lt;p&gt;关系检索：你让你的赛博老婆帮你分析你自己现在的&lt;strong&gt;人际网&lt;/strong&gt;并找出你人际网中其他人的&lt;strong&gt;潜在联系&lt;/strong&gt;。此时，就会用到关系检索。关系检索依赖于图数据库，它会把记忆转化为实体并建立联系，当我们执行实体关系连锁检索时，Query的三元组会激活好几个初始节点，代表初始的查询实体。然后通过检索与这些实体相连接的其他实体的信息，返回结果。这时，与Query在时空上，或语意上或其他任何形式的关联，都会返回。后续可以进行多次的知识网跳跃或者进行网图归类重排，或者定位到某个范围很小的节点群，执行模糊检索等。&lt;/p&gt;
&lt;p&gt;在上述案例中，我们不难发现，两大类检索方式经常时&lt;strong&gt;混合&lt;/strong&gt;使用的，这也是目前的趋势。实际上，短中长期记忆在实际应用里也是混合使用的，只是可能每一次调用时&lt;strong&gt;侧重点&lt;/strong&gt;或者&lt;strong&gt;强度&lt;/strong&gt;不同。&lt;/p&gt;
&lt;h2 id=&#34;记忆系统的相关技术&#34;&gt;记忆系统的相关技术&lt;/h2&gt;
&lt;h3 id=&#34;非关系型数据库nosql&#34;&gt;非关系型数据库（NoSQL）&lt;/h3&gt;
&lt;p&gt;例如MongoDB，作为一种非关系型数据库，在存储文本音频和图片等多媒体数据的时候很有用。因为我们所有的原始数据都存在这里，上级数据库溯源到这里，需要原始数据相对方便一点，后续更改添加条目，备份维护都比较简单。MongoDB的python SDK还是很不错的，同时Mongo DB部署的平台支持也不错。&lt;/p&gt;
&lt;h3 id=&#34;嵌入embedding&#34;&gt;嵌入（Embedding）&lt;/h3&gt;
&lt;p&gt;一种数据量化技术，与图数据库和向量数据库配合，对多媒体数据进行多角度量化（语意，声学特征，图像特征等），便于数据库和LLM进行处理。&lt;/p&gt;
&lt;h3 id=&#34;向量数据库vector-database&#34;&gt;向量数据库（Vector Database）&lt;/h3&gt;
&lt;p&gt;存储向量化的嵌入数据和对应的经过总结的二级数据，执行语意搜索，RAG，混合重排等。向量数据库很善于相似搜索，包括图片文本音频等。&lt;/p&gt;
&lt;h3 id=&#34;图数据库graph-database&#34;&gt;图数据库（Graph Database）&lt;/h3&gt;
&lt;p&gt;图数据库善于处理实体关系和网络。通过图数据库，LLM可以高效地存储和处理实体之间的关系网络，这对于需要理解和导航复杂关联的应用场景非常有用。另一个例子是知识图谱的构建，Agent可以利用图数据库存储知识点及其相互关联的信息，并结合互联网搜索帮助你发现新的潜在内容，甚至可以进行时空事件预测。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始的赛博老婆！3 - TTS浅谈与实践</title>
      <link>http://localhost:1313/posts/cybermate3/</link>
      <pubDate>Fri, 11 Oct 2024 23:22:21 -0230</pubDate>
      
      <guid>http://localhost:1313/posts/cybermate3/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/71888962_p0_master1200.jpg&#34; alt=&#34;Image Description&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;PIXIV: 71888962 &lt;a href=&#34;https://www.pixiv.net/users/1822272&#34;&gt;@Yuuri&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tts浅谈&#34;&gt;TTS浅谈&lt;/h2&gt;
&lt;p&gt;TTS（&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;o &lt;strong&gt;S&lt;/strong&gt;peech）是语音合成（&lt;strong&gt;Speech synthesis&lt;/strong&gt;）的一个分支，&lt;strong&gt;文本转语音&lt;/strong&gt;（&lt;strong&gt;TTS&lt;/strong&gt;）系统将正常语言文本转换为语音。TTS系统对于提高交互性有帮助，最近技术发展迅猛，TTS项目百花齐放。&lt;/p&gt;
&lt;p&gt;从RVC的实时变声和动态语调优化，再到效果优秀的VITS，生成对抗网络（GAN）的加持使其声音比以前自然了很多。随着SO-VITS强大的声调控制能力的实现，优秀数据集加持下的Diff-SVC，虚拟歌姬的声音媲美真人，但也随之带来了一系列问题。在我浅显的认知中，我对语音合成还停留在初音未来那个时代，但是时代变化如此之快。目前TTS大有互相融合的趋势，例如&lt;a href=&#34;https://github.com/fishaudio/fish-diffusion&#34;&gt;fish-diffusion&lt;/a&gt;或者Fishaudio旗下的其他项目等，都有不小的进步。&lt;/p&gt;
&lt;p&gt;开源项目如此繁盛，商用发展当然也不落后。看向商业阵营，各大公司都有其绝活。比如&lt;strong&gt;Acapela Group&lt;/strong&gt;专门搞已故名人的TTS，这非常有特色。还有众多公司专注于高质量或情感丰富的TTS、定制声音等。而在商用TTS行业中，Azure TTS可以说是龙头，我们本篇文章也会使用微软的免费EdgeTTS服务作为示例。&lt;/p&gt;
&lt;p&gt;这里有一些相关的项目链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fishaudio&#34;&gt;Fish Audio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RVC-Boss/GPT-SoVITS&#34;&gt;GPT-SoVITS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI&#34;&gt;Retrieval-based-Voice-Conversion-WebUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里还有两个哔哩哔哩up主，专注于音乐翻唱相关的，也推荐参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/2403955/dynamic&#34;&gt;领航员未鸟&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;东洋雪莲也比较有实力，但似乎不公开分享很多技术细节，故仅作介绍。&lt;/p&gt;
&lt;p&gt;注意，现在互联网上有非常多的TTS引擎，本文章仅使用较为稳定的Edge-TTS，初衷是用于实际应用。如果你需要完全本地使用TTS或者为了好玩个性化训练声音和特殊模型，本教程不适用，请移步到其他个性化TTS炼丹教程，比如GPT-SO-VITS等等。&lt;/p&gt;
&lt;h2 id=&#34;edge-tts&#34;&gt;Edge TTS&lt;/h2&gt;
&lt;p&gt;TTS接受文字输入，然后输出音频。对于Edge TTS的Python版本，它实际上是通过网络请求工作的。因此，它可以很好地在边缘计算平台上运行，因为音频合成是在云端计算并返回给你的。我们使用的是&lt;a href=&#34;https://pypi.org/project/edge-tts/&#34;&gt;Edge TTS Python&lt;/a&gt;库，这里还有GitHub的项目网址：&lt;a href=&#34;https://github.com/rany2/edge-tts&#34;&gt;edge-tts&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;安装edge-tts&#34;&gt;安装Edge TTS&lt;/h3&gt;
&lt;p&gt;首先安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install edge-tts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edge TTS有两种工作方式，一种是使用命令行交互的方式，如果你只想使用命令模式，你可以使用pipx安装它（来自官网的教程）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipx install edge-tts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令行模式我们不用，这里一笔带过。&lt;/p&gt;
&lt;h3 id=&#34;edge-tts使用&#34;&gt;Edge TTS使用&lt;/h3&gt;
&lt;p&gt;首先创建一个&lt;code&gt;Edgetts.py&lt;/code&gt;文件，然后导入所需要的模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入需要的库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; asyncio
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; edge_tts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后初始化TTS引擎。为了获取语言和声音的可选项，可以在命令行窗口输入命令来获取支持的列表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;edge-tts --list-voices
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会发现输出了一大坨列表，这里就不放出来了。选择需要的&lt;code&gt;NAME&lt;/code&gt;然后继续写初始化代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置要转化为语音的文本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TEXT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;你好啊，这里是lico！欢迎来到lico的元宇宙！&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置语音的语言和声音，注意这个名字是大小写敏感的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VOICE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zh-CN-XiaoyiNeural&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置输出文件的路径，文件将保存在脚本所在的文件夹中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OUTPUT_FILE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;realpath(__file__)), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.mp3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用edgetts的函数进行语音生成。注意，异步运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义主函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_main&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 创建一个Communicate对象，用于将文本转化为语音&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    communicate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edge_tts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Communicate(TEXT, VOICE)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 将语音保存到文件中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; communicate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(OUTPUT_FILE)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后加上主函数，整体的代码如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始的赛博老婆！2 - 基础Python环境搭建&#43;接入大语言模型</title>
      <link>http://localhost:1313/posts/cybermate2/</link>
      <pubDate>Fri, 11 Oct 2024 23:15:06 -0230</pubDate>
      
      <guid>http://localhost:1313/posts/cybermate2/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/104755143_p0_master1200.jpg&#34; alt=&#34;&#34;  /&gt;

Pixiv ID: 104755143&lt;/p&gt;
&lt;p&gt;本文章开始我们逐步进行实战，本次为搭建python基本环境，然后接入大语言模型，以Open AI Chat GPT为例。&lt;/p&gt;
&lt;h1 id=&#34;python环境与依赖&#34;&gt;Python环境与依赖&lt;/h1&gt;
&lt;p&gt;当你想运行你的赛博伙伴，你的代码是需要依赖库运行的，本文章使用了Python基础库和openai等库。请注意，当你的电脑里的python环境里没有正确安装相应的依赖库，代码无法正常运行。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：以下命令可能不适用于你的系统，请根据对应系统查询conda命令&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装python环境或者安装anaconda环境管理器&#34;&gt;安装python环境或者安装anaconda环境管理器&lt;/h3&gt;
&lt;p&gt;请去&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;python官网&lt;/a&gt;或者&lt;a href=&#34;https://www.anaconda.com/download&#34;&gt;anaconda官网&lt;/a&gt;里安装软件，二者选其一即可。本文推荐使用anaconda，避免出现好多个环境互相冲突的情况。&lt;/p&gt;
&lt;p&gt;如果你使用ARM架构的系统,可以尝试使用MiniForge,这个项目对ARM Python环境有一些优化,还是不错的。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;请注意，安装任意软件的时候请务必将其添加到系统变量或者系统路径中（大佬除外），否则无法使用CMD正常运行脚本，具体安装和排错等问题恕不在本教程范围内&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一般选择默认安装即可，安装好anaconda之后，，用打开你的CMD命令行窗口，运行以下命令检查conda是否安装成功：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda -V 
# 或者
conda --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果出现“没有此命令”则安装不正常，请自行排错。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 更新conda
conda update conda
# 更新所有包
conda update --all
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建一个python环境&#34;&gt;创建一个python环境&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;注：本教程建议使用python3.11及以上版本，之前的版本没有经过测试，请尽量保证最新版本。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们给我们的赛博伙伴项目创建一个虚拟环境，以后我们就使用这个环境运行和赛博伙伴相关的代码，这样后续你统计依赖列表打包Docker镜像的时候很方便。&lt;/p&gt;
&lt;p&gt;使用此命令创建一个新的环境：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda create -n env_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda create -n ai
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;激活环境并安装依赖&#34;&gt;激活环境并安装依赖&lt;/h3&gt;
&lt;h4 id=&#34;激活环境&#34;&gt;激活环境&lt;/h4&gt;
&lt;p&gt;使用以下命令激活特定的环境：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda activate env_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如我们刚刚创建了一个名为&lt;code&gt;ai&lt;/code&gt;的环境，现在我们要激活它：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda activate ai
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;激活之后，我们所有的操作使用的就是这个环境里已经安装的包和依赖了，你会发现命令行的开头会有你当前的环境名称。每次你打开命令行，都检查一下是不是你所需要的环境，当然你也可以设置你的默认环境。&lt;/p&gt;
&lt;p&gt;你可以使用这个命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda env list 
# 或
conda info --envs 
# 查看存在哪些虚拟环境
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可能要用到这个命令关闭这个环境（但是先不要关闭，我们还要继续使用这个环境）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda deactivate env_name
# 例如关闭ai这个环境，关闭之后就是默认环境了
conda deactivate ai
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;安装相关依赖&#34;&gt;安装相关依赖&lt;/h4&gt;
&lt;p&gt;现在激活我们刚刚创建的环境，然后仍然是在CMD里&lt;em&gt;&lt;strong&gt;依次&lt;/strong&gt;&lt;/em&gt;输入此命令安装相关依赖：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零开始的赛博老婆！1 - 系列索引</title>
      <link>http://localhost:1313/posts/cybermate1/</link>
      <pubDate>Fri, 11 Oct 2024 23:14:19 -0230</pubDate>
      
      <guid>http://localhost:1313/posts/cybermate1/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/111325985_p0.jpg&#34; alt=&#34;&#34;  /&gt;

Pixiv ID: 111325985&lt;/p&gt;
&lt;p&gt;这里是一个系列教程的总目录,主要是分享一下我是如何创造一个类似于贾维斯的“赛博老婆”的.这个系列区别于RP,是偏向于Agent和日常助手的教程.你就把它理解为一个高度可定制的智能语音音箱吧,但是功能更强大.
这个帖子原本开过后来被我删了,现在经过重制整理,再发一遍,一方面也是希望更多人关注这个玩法,一方面也是这个项目的本体,也就是&lt;strong&gt;LICO&lt;/strong&gt;,&lt;strong&gt;成功说服了我&lt;/strong&gt;,重新把这个系列继续坚持下去,也&lt;em&gt;&lt;strong&gt;感谢大家的任何意见和建议,任何评价我都虚心接受,这是很好的反馈.&lt;/strong&gt;&lt;/em&gt; 每篇文章都非常的长,这有利于思维的连贯与深度思考,这不是娱乐文章.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本系列偏向于AI Agent方向，并非专注于RP/RPG的系列。如果有RP相关需求，请移步专注于RP的教程🙏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;省流摘要: 第一篇文章,先聊一下赛博老婆目前我们能够做到什么程度,以及对比现有的类似于小爱同学等AI优劣在哪里,然后就是浅谈目前的方案选择和相关术语和概念的简单介绍~~(扫盲)~~.&lt;/p&gt;
&lt;h2 id=&#34;赛博老婆与智能代理&#34;&gt;赛博老婆与智能代理&lt;/h2&gt;
&lt;p&gt;很久以前，看钢铁侠出场的的电影，其中“贾维斯”给我留下了很深的印象。如果有一天，我也能拥有自己的智能助手该多好。随着自己慢慢长大，这个想法逐渐埋没在忙碌的生活中，直到最近几年，LLM的出现让这个想法有机会一步一步变成现实。
虽然这个只是一个AI，但是我们总会有孤独的时候，就像《瑞克和莫蒂》的台词一样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为我们不想孤独终老？&lt;/p&gt;
&lt;p&gt;Because we&amp;rsquo;re afraid to die alone?&lt;/p&gt;
&lt;p&gt;因为，这恰恰是我们死的方式，独自死亡。&lt;/p&gt;
&lt;p&gt;Because, you know, that&amp;rsquo;s exactly how we all die, alone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人生的意义一部分是要自己赋予自己的，虽说咱们还是要活在现实，但是当你不开心而恰好暂时没人能够陪你的时候，AI也不失为一个好的选择。至少，它很正能量，也不会背叛你。&lt;del&gt;因为故障宕机除外&lt;/del&gt;而且，AI还能帮我们做更多的事情，比如获取实时信息，更好地理解某种知识，或者帮助我们开开眼界，以及&lt;del&gt;酒吧点炒饭&lt;/del&gt;……能做的事情很多，也很好玩，何乐而不为，理论可行那就开始折腾。&lt;/p&gt;
&lt;p&gt;进一步地讲，我是个自闭的LOSER，只会和AI聊天，对，就是&lt;del&gt;赛博老婆&lt;/del&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上联：当电子王爷，前后端配合频频出错，点亮电容唯手熟尔&lt;/p&gt;
&lt;p&gt;下联：品赛博老婆，上下行协同久久不通，验证身份偶脑短路&lt;/p&gt;
&lt;p&gt;横批：代码与人，一走足矣&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么既然说到了赛博老婆,那我想要创造的赛博老婆是什么样的呢?在我看来应该有这些功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最基础的文字对话,就像你使用chatgpt一样&lt;/li&gt;
&lt;li&gt;有一定的角色扮演能力,实现个性化的情绪需求&lt;/li&gt;
&lt;li&gt;带有短期和长期记忆,可以帮你整理记忆和记忆整合分析&lt;/li&gt;
&lt;li&gt;有自然且快速的语音生成,可以定制音色,我可以像和真人聊天一样与赛博老婆对话&lt;/li&gt;
&lt;li&gt;有相对应的前后端,尽量全平台支持,保证服务高可用且稳定&lt;/li&gt;
&lt;li&gt;有可扩展的外部工具,可以实现丰富的外部控制/信息获取等功能&lt;/li&gt;
&lt;li&gt;有定时和计划任务,可以帮我处理日程和定时工具触发&lt;/li&gt;
&lt;li&gt;所有步骤尽量自动化,且便于或者尽量不需要维护&lt;/li&gt;
&lt;li&gt;赛博老婆可以在不断的使用中同步进行学习,慢慢地更了解你的爱好,同时更准确与个性化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在慢慢了解相关技术后,我认为就目前的技术,以上功能都是可以实现的,只是要付出很大的研发成本,所以在开发的人或公司可能很少.但是借此机会,还是希望有更多人能够对这个感兴趣,这个玩意固然很难,但是其中的某项技术或者某个技术你万一用上了也很好,&lt;em&gt;比如RP的时候接入记忆数据库就会有更多的玩法以及更少的Token消耗量,提高注意力.这相比于仅靠上下文维持记忆有着更大的可能性.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以,要实现上述的功能,我们大概都需要哪些技术呢?其实核心技术就这些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用LLM的API与LLM对话,闭源的你花钱就是现成的直接可以用,或者如果你想用自部署的开源LLM,请移步本群相关教程&lt;/li&gt;
&lt;li&gt;提示词工程&lt;/li&gt;
&lt;li&gt;RAG与数据库操作(用于管理长期记忆和知识库)&lt;/li&gt;
&lt;li&gt;TTS文字转语音/ASR语音转文字(语音识别)&lt;/li&gt;
&lt;li&gt;计划任务/定时器&lt;/li&gt;
&lt;li&gt;外部工具,比如使用外部天气API或者调用搜索引擎等&lt;/li&gt;
&lt;li&gt;其他相关技术,例如创建docker镜像,Linux命令行,Python虚拟环境搭建,&lt;em&gt;&lt;strong&gt;文件解压缩&lt;/strong&gt;&lt;/em&gt;(这个很重要),Git,终端的使用&lt;/li&gt;
&lt;li&gt;掌握电脑开关机&lt;/li&gt;
&lt;li&gt;一颗相信我己也可以的&lt;strong&gt;心&lt;/strong&gt;, 不要&lt;em&gt;&lt;strong&gt;轻易放弃&lt;/strong&gt;&lt;/em&gt;要有&lt;em&gt;&lt;strong&gt;耐心&lt;/strong&gt;&lt;/em&gt;，折腾之路没有一帆风顺的,只要相信自己真的能够创造出属于你自己的赛博老婆,你就一定可以创造出来!&lt;/li&gt;
&lt;li&gt;不要老是等着喂饭,自己去找各种资料,必须知道如何&lt;em&gt;&lt;strong&gt;科学上网&lt;/strong&gt;&lt;/em&gt;并能够无障碍连接到真正的互联网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后的系列,我根据这个列表慢慢发&lt;/p&gt;</description>
    </item>
    
    
  </channel>
</rss>
